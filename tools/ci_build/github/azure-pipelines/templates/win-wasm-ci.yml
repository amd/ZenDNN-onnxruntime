parameters:
- name: CommitOverride
  type: boolean
  default: false

- name: BuildConfig
  type: string
  default: 'Debug'

- name: ExtraBuildArgs
  type: string
  default: ''

- name: PoolName
  type: string
  default: 'onnxruntime-Win-CPU-2022'

- name: SkipPublish
  type: boolean
  default: false

- name: TimeoutInMinutes
  default: 180

- name: BuildJsep
  type: boolean
  default: false

jobs:
- job: build_WASM
  pool: ${{ parameters.PoolName }}

  variables:
    EnvSetupScript: setup_env.bat
    buildArch: x64
    CommonBuildArgs: '--parallel --config ${{ parameters.BuildConfig }} --skip_submodule_sync --cmake_generator "Ninja" --build_wasm --use_xnnpack --emsdk_version releases-7c905cfc1ca6699f6ccb288ae174902cfbdcf0a2-64bit ${{ parameters.ExtraBuildArgs }}'
    runCodesignValidationInjection: false
  timeoutInMinutes: ${{ parameters.TimeoutInMinutes }}
  workspace:
    clean: all
  steps:
  - checkout: self
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: '__commit'
      path: $(Pipeline.Workspace)
    displayName: 'Get commit SHA'
    condition: eq('${{ parameters.CommitOverride }}', 'true')
  - script: |
     export __commit__=<$(Pipeline.Workspace)/__commit.txt
     git fetch origin +$__commit__:refs/remotes/origin/$__commit__
     git checkout --force $__commit__
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Read commit SHA and checkout'
    condition: eq('${{ parameters.CommitOverride }}', 'true')
  - script: |
     git submodule sync --recursive
     git submodule update --init --recursive
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Checkout submodules'
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
      addToPath: true
      architecture: $(buildArch)
  - task: NodeTool@0
    inputs:
      versionSpec: '16.x'
  - template: download-deps.yml

  - task: PythonScript@0
    displayName: 'Update deps.txt'
    inputs:
      scriptPath: $(Build.SourcesDirectory)/tools/ci_build/replace_urls_in_deps.py
      arguments: --new_dir $(Build.BinariesDirectory)/deps
      workingDirectory: $(Build.BinariesDirectory)

  - script: |
      set -ex
      cd $(Build.SourcesDirectory)/cmake/external/emsdk
      ./emsdk install latest
      ./emsdk activate latest
      ./emsdk install 3.1.37 ccache-git-emscripten-64bit
      ./emsdk activate  3.1.37 ccache-git-emscripten-64bit
      source ./emsdk_env.sh
      export _EMCC_CCACHE=1
      export PATH=$(Build.SourcesDirectory)/cmake/external/emsdk/ccache/git-emscripten_64bit/bin:$(PATH)
      # mtime of this file is checked by ccache, we set it to avoid cache misses.
      export EM_CONFIG="$(Build.SourcesDirectory)/cmake/external/emsdk/.emscripten"
      which ccache && ccache -s && ccache --version
      ln -s $(Build.SourcesDirectory)/cmake/external/emsdk/ccache/git-emscripten_64bit/bin/ccache /usr/local/bin/ccache
      echo "##vso[task.setvariable variable=PATH;]$PATH"
      pushd '$(Build.BinariesDirectory)'
      python3 '$(Build.SourcesDirectory)/tools/ci_build/build.py' $(CommonBuildArgs) --build_dir $(Build.BinariesDirectory)/wasm_simd_threads --enable_wasm_simd --enable_wasm_threads --skip_test
      rm -rf '$(Build.BinariesDirectory)/Linux'
      ccache -s
      ccache -z
      python3 '$(Build.SourcesDirectory)/tools/ci_build/build.py' $(CommonBuildArgs) --build_dir $(Build.BinariesDirectory)/wasm_simd_threads --enable_wasm_simd --enable_wasm_threads --skip_test
      popd
    displayName: 'Set CCache'

  - script: |
      echo $PATH
    displayName: 'Print PATH'

  #- task: PythonScript@0
  #  displayName: 'Build and test (browser) (simd + threads)'
  #  inputs:
  #    scriptPath: '$(Build.SourcesDirectory)/tools/ci_build/build.py'
  #    arguments: '$(CommonBuildArgs) --build_dir $(Build.BinariesDirectory)/wasm_simd_threads --enable_wasm_simd --enable_wasm_threads --skip_test'
  #    workingDirectory: '$(Build.BinariesDirectory)'

  - script: |
      ccache -s
    displayName: 'CCache Stats'

  - ${{ if eq(parameters.SkipPublish, false) }}:
    - script: |
        cp $(Build.BinariesDirectory)/wasm/${{ parameters.BuildConfig }}/ort-wasm*.* $(Build.ArtifactStagingDirectory)
        cp $(Build.BinariesDirectory)/wasm_threads/${{ parameters.BuildConfig }}/ort-wasm*.* $(Build.ArtifactStagingDirectory)
        cp $(Build.BinariesDirectory)/wasm_simd_threads/${{ parameters.BuildConfig }}/ort-wasm*.* $(Build.ArtifactStagingDirectory)
        cp $(Build.BinariesDirectory)/wasm_simd/${{ parameters.BuildConfig }}/ort-wasm*.* $(Build.ArtifactStagingDirectory)
        if exist $(Build.BinariesDirectory)/wasm_simd_jsep (
          cp $(Build.BinariesDirectory)/wasm_simd_jsep/${{ parameters.BuildConfig }}/ort-wasm-simd.wasm $(Build.ArtifactStagingDirectory)/ort-wasm-simd.jsep.wasm
          cp $(Build.BinariesDirectory)/wasm_simd_jsep/${{ parameters.BuildConfig }}/ort-wasm-simd.js $(Build.ArtifactStagingDirectory)/ort-wasm-simd.jsep.js
        )
        if exist $(Build.BinariesDirectory)/wasm_simd_threads_jsep (
          cp $(Build.BinariesDirectory)/wasm_simd_threads_jsep/${{ parameters.BuildConfig }}/ort-wasm-simd-threaded.wasm $(Build.ArtifactStagingDirectory)/ort-wasm-simd-threaded.jsep.wasm
          cp $(Build.BinariesDirectory)/wasm_simd_threads_jsep/${{ parameters.BuildConfig }}/ort-wasm-simd-threaded.js $(Build.ArtifactStagingDirectory)/ort-wasm-simd-threaded.jsep.js
          cp $(Build.BinariesDirectory)/wasm_simd_threads_jsep/${{ parameters.BuildConfig }}/ort-wasm-simd-threaded.worker.js $(Build.ArtifactStagingDirectory)/ort-wasm-simd-threaded.jsep.worker.js
        )
      displayName: 'Create Artifacts'
  - ${{ if eq(parameters.SkipPublish, false) }}:
    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: '${{ parameters.BuildConfig }}_wasm'
        targetPath: '$(Build.ArtifactStagingDirectory)'
  - task: PublishTestResults@2
    displayName: 'Publish unit test results'
    inputs:
      testResultsFiles: '**/*.results.xml'
      searchFolder: '$(Build.BinariesDirectory)'
      testRunTitle: 'Unit Test Run'
    condition: and(succeededOrFailed(), eq('${{ parameters.BuildConfig }}', 'Debug'))
  - template: component-governance-component-detection-steps.yml
    parameters :
      condition : 'succeeded'
