parameters:
- name: CommitOverride
  type: boolean
  default: false

- name: BuildConfig
  type: string
  default: 'Debug'

- name: ExtraBuildArgs
  type: string
  default: ''

- name: PoolName
  type: string
  default: 'onnxruntime-Win-CPU-2022'

- name: SkipPublish
  type: boolean
  default: false

- name: TimeoutInMinutes
  default: 180

- name: BuildJsep
  type: boolean
  default: false

jobs:
- job: build_WASM
  pool: ${{ parameters.PoolName }}

  variables:
    EnvSetupScript: setup_env.bat
    buildArch: x64
    CommonBuildArgs: '--parallel --config ${{ parameters.BuildConfig }} --skip_submodule_sync --cmake_generator "Ninja" --build_wasm --use_xnnpack --emsdk_version releases-7c905cfc1ca6699f6ccb288ae174902cfbdcf0a2-64bit ${{ parameters.ExtraBuildArgs }}'
    runCodesignValidationInjection: false
    ORT_CACHE_DIR: $(Agent.TempDirectory)/ort_ccache
  timeoutInMinutes: ${{ parameters.TimeoutInMinutes }}
  workspace:
    clean: all
  steps:
  - checkout: self
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: '__commit'
      path: $(Pipeline.Workspace)
    displayName: 'Get commit SHA'
    condition: eq('${{ parameters.CommitOverride }}', 'true')
  - script: |
     export __commit__=<$(Pipeline.Workspace)/__commit.txt
     git fetch origin +$__commit__:refs/remotes/origin/$__commit__
     git checkout --force $__commit__
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Read commit SHA and checkout'
    condition: eq('${{ parameters.CommitOverride }}', 'true')
  - script: |
     git submodule sync --recursive
     git submodule update --init --recursive
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Checkout submodules'
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
      addToPath: true
      architecture: $(buildArch)
  - task: NodeTool@0
    inputs:
      versionSpec: '16.x'
  - template: download-deps.yml

  - task: PythonScript@0
    displayName: 'Update deps.txt'
    inputs:
      scriptPath: $(Build.SourcesDirectory)/tools/ci_build/replace_urls_in_deps.py
      arguments: --new_dir $(Build.BinariesDirectory)/deps
      workingDirectory: $(Build.BinariesDirectory)

  - script: |
      set -ex
      cd '$(Build.SourcesDirectory)/cmake/external/emsdk'
    displayName: 'Set CCache'

  - task: Cache@2
    inputs:
      ${{if eq(variables['Build.SourceBranchName'], 'merge')}}:
        key: ' "$(TODAY)" |  wasm_simd_threads  | merge '
      ${{else}}:
        key: '"$(TODAY)" | onnxruntime | wasm_simd_threads  | $(Build.SourceVersion) '
      path: $(ORT_CACHE_DIR)/wasm_simd_threads
      restoreKeys: |
        "$(TODAY)" | wasm_simd_threads
    displayName: Cache Task

  - script: |
      mkdir -p '$(Build.BinariesDirectory)/ccache_debug'
      pushd '$(Build.SourcesDirectory)/cmake/external/emsdk'
      ./emsdk install 3.1.37 ccache-git-emscripten-64bit
      ./emsdk activate 3.1.37 ccache-git-emscripten-64bit
      source ./emsdk_env.sh
      export PATH=$(Build.SourcesDirectory)/cmake/external/emsdk/:$PATH
      export PATH=$(Build.SourcesDirectory)/cmake/external/emsdk/ccache/git-emscripten_64bit/bin:$PATH
      ln -s $(Build.SourcesDirectory)/cmake/external/emsdk/ccache/git-emscripten_64bit/bin/ccache /usr/local/bin/ccache
      echo $PATH
      ccache -s
      ccache -z
      echo "##vso[task.setvariable variable=_EMCC_CACHE;]1"
      echo "##vso[task.setvariable variable=EM_COMPILER_WRAPPER;]ccache"
      echo "##vso[task.setvariable variable=EM_DIR;]$(Build.SourcesDirectory)/cmake/external/emsdk/upstream/emscripten"
      # mtime of this file is checked by ccache, we set it to avoid cache misses.
      echo "##vso[task.setvariable variable=EM_CONFIG;]$(Build.SourcesDirectory)/cmake/external/emsdk/.emscripten"

      export _EMCC_CCACHE=1
      export EM_COMPILER_WRAPPER=ccache
      export EM_DIR=$(Build.SourcesDirectory)/cmake/external/emsdk/upstream/emscripten
      ls $EM_DIR
      # mtime of this file is checked by ccache, we set it to avoid cache misses.
      export EM_CONFIG="$(Build.SourcesDirectory)/cmake/external/emsdk/.emscripten"

      which ccache && ccache -s && ccache --version
      echo "##vso[task.setvariable variable=PATH;]$PATH"

      pushd '$(Build.BinariesDirectory)'
      python3 '$(Build.SourcesDirectory)/tools/ci_build/build.py' $(CommonBuildArgs) --build_dir $(Build.BinariesDirectory)/wasm_simd_threads --enable_wasm_simd --enable_wasm_threads --skip_test
      ccache -s
      ccache -z
      #emcc --clear-cache
      popd
      popd
    displayName: 'Build and test (browser) (simd + threads)'
    env:
      CCACHE_DEBUG: 1
      CCACHE_DEBUGDIR: '$(Build.BinariesDirectory)/ccache_debug'
      CCACHE_SLOPPINESS: include_file_ctime,include_file_mtime,time_macros
      CCACHE_DIR: $(ORT_CACHE_DIR)/wasm_simd_threads
      #_EMCC_CCACHE: 1
      #EM_COMPILER_WRAPPER: ccache
      #EM_DIR: '$(Build.SourcesDirectory)/cmake/external/emsdk/upstream/emscripten'
      #EM_CONFIG: '$(Build.SourcesDirectory)/cmake/external/emsdk/.emscripten'

  - script: |
      echo $PATH
    displayName: 'Print PATH'

  - script: |
      ccache -s
    displayName: 'CCache Stats'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(Build.BinariesDirectory)/ccache_debug'
      ArtifactName: 'ccache_log'

  #- task: PythonScript@0
  #  displayName: 'Build and test (browser) (simd + threads)'
  #  inputs:
  #    scriptPath: '$(Build.SourcesDirectory)/tools/ci_build/build.py'
  #    arguments: '$(CommonBuildArgs) --build_dir $(Build.BinariesDirectory)/wasm_simd_threads --enable_wasm_simd --enable_wasm_threads --skip_test'
  #    workingDirectory: '$(Build.BinariesDirectory)'
